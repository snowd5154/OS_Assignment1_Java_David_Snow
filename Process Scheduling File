//David_Snow
//COSC_3360
//Process_Scheduling_Assignment
//February 19, 2020

import java.io.BufferedReader;
import java.io.ioException;
import java.io.InputStreamReader;
import java.util.Objects;

public class ProcessScheduling{
    public class ProcessSchedulingFunctions{
        public static void findProcessTime{
            printArrival(int id);
            printNumCores(int id);
            printStart(int id);
            printRequestedCore(int id, intreqTime);
            printRequestedSSD(int id, int size);
            printRequestedPID(int id);
            printRequestedIO(int id, int reqTime);
            printWaitCore(int id, int size);
            printWaitSSD(int id, int size);
            printWaitIO(int id, int size);
            printCompletionCore(int id);
            printCompletionSSD(int id);
            printCompletionIO(int IO);
            OnCore(int id, int reqTime);
            onSSD(int id, int reqTime);
            onIO(int id, int reqTime);
            OnCompleteCore(int id);
            onCompleteSSD(int id);
            Solution();
            printStartIO(int id);
        }
    }
}
public class FunctionVariables {
    public void Instructions() {
        int currTime = 0;
        string NumCores = "NumCores";
        string READY = "READY";
        string START = "START";
        string IDLE = "IDLE";
        string CORE = "CORE";
        string SSD = "SSD";
        string IO = "IO";
        string ARRIVAL = "ARRIVAL";
        string TERMINATED = "TERMINATED";
        string RUNNIG = "RUNNING";
        strign BLOCKED = "BLOCKED";
    }
}
public class ClassesForProcessScheduling{
    public void classes(){
        class request {
            string operation = "";
            int reeqTime = 0;
        };
        class process{
            int id = 0;
            int startTime = 0;
            int completionTime = 0;
            int coreAccessCount = 0;
            int coreRequestCount = 0;
            int SSDRequestCount = 0;
            int ssdAccessCount;
            int ttyCount = 0;
            string status = IDLE;
            queue <request*>reqs; // core time request
        }
    };

        public static void ProcessSchedulingMethod {
            onProcessTerminated(process p, queue < process * > output, string core, string ssd);

            printNumCores( int id){
                System.out.println("--NumCores event for process " + id + "at time " + currTime + " ms \n\n");
            }
            printStart( int id){
                System.out.println("--Process " + id + " starts input from user at time " + currTime + " ms \n\n");
            }
            printPID( int id){
                System.out.println("--Process " + id++" starts input from user at time " + currTime + "ms \n\n");
            }
            printRequestCore( int id, int reqTime){
                System.out.println("--Process" + id + "request a core at time " + currTime + " ms for " + reqTime + " ms \n\n");
            }
        printRequestSSD(int id, int reqTime){
                System.out.println("--Process" + id + "request input from user at time " + currTime + " ms for " + reqTime + " ms \n\n");
            }
            printWaitCore(int id, int size){
                System.out.println("--Process " + id + "must wait for a Core" + "\n\n");
                System.out.println("--Ready queue now contains " + size + "process(es) waiting for a CORE\n\n");
            }
        printWaitSSD(int id, int size){
                System.out.println("--Process " + id + "must wait for a SSD\n\n" + "--Ready queue now contains " + size + process(es) waiting for a SSD\n\n");
            }
        printCompletionCore(int id){
                System.out.println("--CORE completion event for a process" + id + "at tiem " + currTiem + " ms \n\n");
            }
            onCore(int id, int reqTime){
                System.out.println("--Process " + id + "will complete core at time " + reqTime + currTime + " ms \n\n");
            }
                onSSD(int id, int reqTime){
                    System.out.println"(--Process " + id + " will complete SSD at time " + reqTime + currTime + " ms \n\n)";
                }
                onCompleteCore(int id) {
                System.out.println("CORE Completion even for process " + id + "at time " + currTime + " ms \n\n");
            }
            onCompleteSSD(int id){
                System.out.println("SSD Completion even for process " + id + "at time " + currTime + " ms \n\n");
            }
            }
            //end of while loop

        public class ProcessTerminated{
        public void ProcessTerminated(process p, queue<process p, queue<process*> output, string CORE, string SSDD) {
            System.out.println("PROCESS TABLE\n\n");
            System.out.println("Process " + p.id + " terminates at time " + currTime + " ms \n\n");
            System.out.println("Process " + p.id + " ran for " + currTime - p.startTime + " ms, performed " + p.coreRequestCOunt + " and performed SSD Accesses of " + p.SSDRequestCout + " for " + SSD + " ms \n\n");
            System.out.println(" Core is " + CORE + "\n" + "SSD is " + SSD + "\n");
        }
        }
        }
    public static void main(String []args){
    Solution();
    }
    public class PrintQueue{
    public static void PrintQueue(queue <process> q){
        while (!q.empty()) {
            System.out.println(q.front().id + "---" + q.front().reqs.back()->reqTime + "\n\n");
            q.pop;
        }
        }
    public class Solution{
        ifstream infile("input11.txt"); //IS THIS APPLICABLE IN JAVA? I LOOKED THIS UP AND SUPPOSEDLY NOT. INSTEAD IT SHOULD BE BUFFERED STREAM??
        string line;
        queue < process> processes;
        bool endline;

        int id = 0;

        System.out.println(vector<int> v);
        process p;
        queue + process * + output;
        while(System.out.println(getline(infile, line))){
            System.out.println(stringstream iss(line));
            string a;
            int b;
            if (!line.empty()){
                if(!(iss >> a >> b)) {
                    break;
                }
                auto * r = new request;
                //System.out.println(a + "" + b + "\n");
                if (a == "NumCores") {
                    if (p.status == ARRIVAL) {
                        processes.push(p);
                        process newp;
                        p = newp;
                    }
                    p.startTime = b;
                    p.id = id;
                    v.push_back(id);
                    id++;
                    p.status = ARRIVAL;
                } else if (b != 0){
                    if (a == CORE) {
                        r -> operation = CORE;
                        r -> reqTime = b;
                    } else if (a == CORE) {
                        r -> operation = CORE;
                        r -> reqTIme = b;
                    }else{
                        System.out.println("File contains errors");
                    }
                    p.reqs.push(r);
                }
                if (a == START) {
                    p.ssdAccessCount++;
                }

                int core_used_by = -1;
                queue <process> waitingQueue;
                queue <process> coreQueue;
                queue <process> ssdQueue;
                int SSD_used_by = -1;

                int processesSizetemp = processes.size();
                for(int i = 0; i < processesSizetemp; i++) {
                    output.push( & processes.front());
                }

                string operation;
                process p;
                while (processes.size() > 0) {
                    bool endline = false;
                    currTime++;
                    int processesSize = processes.size();
                    for( int i = 0; i < processesSize; i++){
                        p = processes.front();
                        p.completionTime++;
                        processes.op();
                        if(p.status == ARRIVAL && p.startTIme == currTime){
                            printStart(p.id);
                            p.status = READY;
                        }
                        if (p.status == CORE) {
                            p.reqs.front()->reqTIME--;
                            if (p.reqs.front()->reqTime == 0){
                                core_used_by = -1;
                                p.reqs.pop();
                                printCompletionCore(p.id);
                                p.status = READY;
                                if (!waitingQueue.empty()){
                                    process temp = waitingQueue.front();
                                    waitingQueue.pop();
                                    core_used_by = temp.id;
                                    onCore(temp.id, temp.reqs.front()->reqTime);
                                    temp.status = CORE;
                                    processes.push(temp);
                                }
                            }
                            if (p.status == SSD){
                                p.reqs.front()->reqTime--;
                                if(p.reqs.front()->reqTime == 0){
                                    SSD_used_by = -1;
                                    p.reqs.pop();
                                    p.status = READy;
                                    if(!ssdQueue.empty()){
                                        process temp = ssdQueue.front();
                                        ssdQueue.pop();
                                        SSD_used_by = temp.id;
                                        onSSD(temp.id, temp.reqs.front()->reqTime);
                                        temp.status = SSD;
                                        processes.push(temp);
                                    }
                                }
                            }
                            if(p.reqs.empty()){
                                operation = p.reqs.front()->operation;

                                if (operation == CORE && p.status == READY) {
                                    printRequestCore(p.id, p.reqs.front()->reqTime);
                                    core_used_by = p.id;
                                    p.status = CORE;
                                }else{
                                    p.status = BLOCKED;
                                    waitingQueue.push(p);
                                    printWaitCore(p.id, waitingQueue.size());
                                }
                            endline = true;
                            }
                            waitingQueue.push(p);
                            printWaitCore(p.id, waitingQueue.size());
                        }
                        endline = true;
                    }
                if(operation == SSD && p.status == READY){
                    printRequestSSD(p.id, p.reqs.front()->reqTime);
                    if (SSD_used_by == -1) {
                        onSSD(p.id, p.reqs.front()->reqTime);
                        p.ssdAccessCount++;
                        SSD_used_by = p.id;
                        p.status = SSD;
                    }else {
                        p.status = BLOCKED;
                        ssdQueue.push(p);
                        printWaitSSD(p.id, ssdQueue.size());
                    }
                    endline = true;
                    }
                if (operation == IO && p.status == READY) {
                    printStart(p.id);
                    p.status = IO;
                    endline = true;
                }
                }
            if (p.reqs.empty()){
                p.status = TERMINATED;
                onProcessTerminated(p, output, waitingQueue.empty() ? "IDLE" : "BUSY", ssd Queue.empty() ? "IDLE" : "BUSY");
                queue <process> dummy;
                dummy.push(p);
                queue <process> temp = processes;
                while (!temp.empty()) {
                    dummy.push(temp.front());
                    temp.pop();
                }
                temp = ssdQueue;
                while (!temp.empty()) {
                    dummy.push(temp.front());
                    temp.pop();
                }

                for(int m:v){
                    queue <process> temp = dummy;
                    while(!temp.empty()){
                        if(temp.front().id == m){
                            process dtemp = temp.front();
                            string status;
                            if(dtemp.status == CORE) {
                                status = RUNNING;
                            }else if (dtemp.status == BLOCKED) {
                                status = READY;
                            }else if (dtemp.status == TERMINATED){
                                sttus = TERMINATED;
                            }
                        System.out.println("Process " + dtemp.id + "started at time " + dtemp.startTime + "ms and is " + status + "\n");
                            temp.pop();
                        }
                    }
                }
                if(p.status != TERMINATED && p.status != BLOCKED){
                    processes.push(p);
                }
            }else if(endline){
                System.out.println("\n\n");
            }
            }
        }
    }
